#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include "common.h"
#include <vector>
#include <iostream>

#define cutoff 0.01

using namespace std;

//
//  benchmarking program
//
int main( int argc, char **argv )
{    
    if( find_option( argc, argv, "-h" ) >= 0 )
    {
        printf( "Options:\n" );
        printf( "-h to see this help\n" );
        printf( "-n <int> to set number of particles\n" );
        printf( "-o <filename> to specify the output file name\n" );
        return 0;
    }

    int n = read_int( argc, argv, "-n", 1000 );
    int numThreads = read_int( argc, argv, "-p", 2 );
    char *savename = read_string( argc, argv, "-o", NULL );

    FILE *fsave = savename ? fopen( savename, "w" ) : NULL;

    particle_t *particles = (particle_t*) malloc( n * sizeof(particle_t) );
    double size = set_size( n );
    init_particles( n, particles );

    //
    //  simulate a number of time steps
    //
	int numberOfRows = floor(size/cutoff);
	cout<<numberOfRows*numberOfRows<<endl;
    
   // vector<particle_t> **matrix = createGrid(n, numberOfRows);
    
 
    double simulation_time = read_timer( );
	vector<particle_t> **matrix = createGrid(n, numberOfRows);
	int row, column, i, j;
	particle_t temp;
	vector<particle_t> nearest;
	
	
    #pragma omp parallel num_threads(numThreads) private(i, j, nearest) firstprivate(row, column, temp)
    for( int step = 0; step < 1000; step++ ){
    	
		#pragma omp for
		for(i = 0; i < numberOfRows; i++){
			for(j = 0; j < numberOfRows; j++){
				matrix[i][j].clear();
			}
		}
	
		#pragma omp single
		for(i = 0; i < n; i++){	
			temp = particles[i];
			column = floor(temp.x/size*numberOfRows);
			row = floor(temp.y/size*numberOfRows);
			//cout<<"row "<<row<<" column "<<column<<endl;
			//#pragma omp critical
			//{
			matrix[row][column].push_back(temp);
			//}
		}
		#pragma omp barrier
		//cout<<"0"<<endl;
        //
        //  compute all forces
        //
        //cout << "for in" << endl;
        #pragma omp for
        for( int k = 0; k < n; k++ ){
            particles[k].ax = particles[k].ay = 0;
			//cout<<"tried nearest"<<endl;
			nearest = findNearest(particles[k], numberOfRows, size, matrix);
			//cout<<"done"<<endl;
			for(int r = 0; r < nearest.size(); r++) {
				if(!(nearest[r].x == particles[k].x && nearest[r].y == particles[k].y)){
					apply_force(particles[k], nearest[r]);				
				}			
			}
		}
		//cout << "for ut" << endl;
        
        //
        //  move particles
        //
        #pragma omp for
        for( int k = 0; k < n; k++ ) 
            move( particles[k] );
        
        //
        //  save if necessary
        //
        #pragma omp master
        if( fsave && (step%SAVEFREQ) == 0 )
            save( fsave, n, particles );
            
        //cout << "timestep ut" << endl;
    }
    simulation_time = read_timer( ) - simulation_time;
    
    printf("n = %d, n_threads = %d, simulation time = %g seconds\n", n, numThreads, simulation_time );
    
    free( particles );
    if( fsave )
        fclose( fsave );
    
    cout<<getLol()<<endl;
    
    return 0;
}
